
-- instructions:
-- connect to psql (obvious)
-- CREATE DATABASE BARBIE; (or whatever name)
-- CHECK THE DATABASE LIST: \l

-- FIRST DROP TABLE WITH FOREIGN KEYS
DROP TABLE IF EXISTS T_LISTSETUPS;
DROP TABLE IF EXISTS T_LISTCOMPONENTS;
DROP TABLE IF EXISTS T_GAMELISTS;
DROP TABLE IF EXISTS T_COMPONENTS;
DROP TABLE IF EXISTS T_COMMENTS;
DROP TABLE IF EXISTS T_ROLES;
DROP TABLE IF EXISTS T_ROLESCODES;
DROP TABLE IF EXISTS T_USERS;
DROP TABLE IF EXISTS T_SETUPS;
DROP TABLE IF EXISTS T_PICTURES;
DROP TABLE IF EXISTS T_GAMES;
DROP TABLE IF EXISTS T_TYPES;

-- THIRD: CREATE ALL TABLES

-- TABLE TROLES: USER, ADMIN, SUPERADMIN
CREATE TABLE IF NOT EXISTS T_ROLESCODES (
    ID_ROL INT GENERATED ALWAYS AS IDENTITY,
    NAME_ROL VARCHAR(50) UNIQUE NOT NULL,
    PRIMARY KEY(ID_ROL)
);

-- TABLE TSETUP: NAME OF THE SETUP'S LIST
CREATE TABLE IF NOT EXISTS T_SETUPS (
    ID_SET INT GENERATED ALWAYS AS IDENTITY,
    NAME_SET VARCHAR(50) UNIQUE NOT NULL,
    PRIMARY KEY(ID_SET)
);

-- TABLE TPICTURES: PROFILE PICTURE USER CAN CHOOSE
CREATE TABLE IF NOT EXISTS T_PICTURES (
    ID_PIC INT GENERATED ALWAYS AS IDENTITY,
    NAME_PIC VARCHAR(50) UNIQUE NOT NULL,
    PRIMARY KEY(ID_PIC)
);

-- TABLE TGAMES: GAME'S LIST AVAILABLE
CREATE TABLE IF NOT EXISTS T_GAMES (
    ID_GAM INT GENERATED ALWAYS AS IDENTITY,
    NAME_GAM VARCHAR(50) UNIQUE NOT NULL,
    PIC_GAM VARCHAR(50) NOT NULL,
    PRIMARY KEY (ID_GAM)
);

-- TABLE TTYPES: TYPE OF THE COMPONENTS: CPU, GPU, HDD, ETC..
CREATE TABLE IF NOT EXISTS T_TYPES (
    ID_TYP INT GENERATED ALWAYS AS IDENTITY,
    NAME_TYP VARCHAR(50) UNIQUE NOT NULL,
    PRIMARY KEY(ID_TYP)
);

-- TABLE TUSERS 
CREATE TABLE IF NOT EXISTS T_USERS (
    ID_USE INT GENERATED ALWAYS AS IDENTITY,
    EMAIL_USE VARCHAR(50) UNIQUE NOT NULL,
    USERNAME_USE VARCHAR(50) UNIQUE NOT NULL,
    PASSWD_USE VARCHAR(255) NOT NULL,
    TOKEN_USE VARCHAR(255) NOT NULL,
    FKPICTURES_USE INT NOT NULL DEFAULT 1,
    PRIMARY KEY(ID_USE),
    CONSTRAINT FKPICTURES_USE FOREIGN KEY(FKPICTURES_USE) REFERENCES T_PICTURES(ID_PIC) ON DELETE SET NULL
);

CREATE TABLE IF NOT EXISTS T_ROLES (
    FKUSERS_ROL INT NOT NULL,
    FKROLESCODES_ROL INT NOT NULL,
    PRIMARY KEY(FKROLESCODES_ROL, FKUSERS_ROL),
    CONSTRAINT FKROLESCODES_ROL FOREIGN KEY(FKROLESCODES_ROL) REFERENCES T_ROLESCODES(ID_ROL) ON DELETE SET NULL,
    CONSTRAINT FKUSERS_ROL FOREIGN KEY(FKUSERS_ROL) REFERENCES T_USERS(ID_USE) ON DELETE SET NULL

);
-- TABLE TCOMPONENTS: USER COMPONENT'S LIST
CREATE TABLE IF NOT EXISTS T_COMPONENTS (
    ID_COMP INT GENERATED ALWAYS AS IDENTITY,
    SERIAL_COMP VARCHAR(50) UNIQUE NOT NULL,
    FKTYPES_COMP INT NOT NULL,
    PRIMARY KEY(ID_COMP),
    CONSTRAINT FKTYPES_COMP FOREIGN KEY(FKTYPES_COMP) REFERENCES T_TYPES(ID_TYP) ON DELETE SET NULL
);

-- TABLE TCOMMENTS: USER COMMENTS ABOUT A SPECIFIC GAME
CREATE TABLE IF NOT EXISTS T_COMMENTS (
    ID_COMM INT GENERATED ALWAYS AS IDENTITY,
    TEXT_COMM VARCHAR(255) NOT NULL,
    DATE_COMM DATE NOT NULL DEFAULT CURRENT_DATE,
    FKUSERS_COMM INT NOT NULL,
    FKGAMES_COMM INT NOT NULL,
    PRIMARY KEY(ID_COMM),
    CONSTRAINT FKUSERS_COMM FOREIGN KEY(FKUSERS_COMM) REFERENCES T_USERS(ID_USE) ON DELETE SET NULL,
    CONSTRAINT FKGAMES_COMM FOREIGN KEY(FKGAMES_COMM) REFERENCES T_GAMES(ID_GAM) ON DELETE SET NULL
);

-- TABLE TUSE_SET: RELATION TABLE BETWEEN TUSERS ANS TSETUPS
CREATE TABLE IF NOT EXISTS T_LISTSETUPS (
    FKUSERS_LISTSET INT NOT NULL,
    FKSETUPS_LISTSET INT NOT NULL,
    PRIMARY KEY(FKUSERS_LISTSET, FKSETUPS_LISTSET),
    CONSTRAINT FKUSERS_LISTSET FOREIGN KEY (FKUSERS_LISTSET) REFERENCES T_USERS(ID_USE) ON DELETE SET NULL,
    CONSTRAINT FKSETUPS_LISTSET FOREIGN KEY (FKSETUPS_LISTSET) REFERENCES T_SETUPS(ID_SET) ON DELETE SET NULL
);

-- TABLE TUSE_SET: RELATION TABLE BETWEEN TSETUPS ANS TCOMPONENTS
CREATE TABLE IF NOT EXISTS T_LISTCOMPONENTS (
    FKSETUPS_LISTCOMP INT NOT NULL,
    FKCOMPONENTS_LISTCOMP INT NOT NULL,
    PRIMARY KEY(FKSETUPS_LISTCOMP, FKCOMPONENTS_LISTCOMP),
    CONSTRAINT FKSETUPS_LISTCOMP FOREIGN KEY(FKSETUPS_LISTCOMP) REFERENCES T_SETUPS(ID_SET) ON DELETE SET NULL,
    CONSTRAINT FKCOMPONENTS_LISTCOMP FOREIGN KEY(FKCOMPONENTS_LISTCOMP) REFERENCES T_COMPONENTS(ID_COMP) ON DELETE SET NULL
);

-- TABLE TUSE_SET: RELATION TABLE BETWEEN TUSERS ANS TGAMES
CREATE TABLE IF NOT EXISTS T_GAMELISTS (
    FKUSERS_GAM INT NOT NULL,
    FKGAMES_GAM INT NOT NULL,
    NAME_GAM VARCHAR(50) NOT NULL UNIQUE,
    PRIMARY KEY(FKUSERS_GAM, FKGAMES_GAM),
    CONSTRAINT FKUSERS_GAM FOREIGN KEY(FKUSERS_GAM) REFERENCES T_USERS(ID_USE) ON DELETE SET NULL,
    CONSTRAINT FKGAMES_GAM FOREIGN KEY(FKGAMES_GAM) REFERENCES T_GAMES(ID_GAM) ON DELETE SET NULL
);

-- COMMIT;

-- FOURTH: MAKE ALL THE INSERT FOR THE DEV ONLY!
INSERT INTO T_ROLESCODES (NAME_ROL) VALUES('admin');
INSERT INTO T_ROLESCODES (NAME_ROL) VALUES('user');
INSERT INTO T_PICTURES (NAME_PIC) VALUES ('/PATH/PICTURE_1.jpg');
INSERT INTO T_PICTURES (NAME_PIC) VALUES ('/PATH/PICTURE_2.jpg');
INSERT INTO T_PICTURES (NAME_PIC) VALUES ('/PATH/PICTURE_3.jpg');
INSERT INTO T_PICTURES (NAME_PIC) VALUES ('/PATH/PICTURE_4.jpg');
INSERT INTO T_GAMES (NAME_GAM, PIC_GAM) VALUES ('GTA5', '/PATH/PICTURE_GTA5.jpg');
INSERT INTO T_GAMES (NAME_GAM, PIC_GAM) VALUES ('Counter Strike', '/PATH/PICTURE_CS.jpg');
INSERT INTO T_TYPES (NAME_TYP) VALUES ('CPU');
INSERT INTO T_TYPES (NAME_TYP) VALUES ('GPU');
INSERT INTO T_TYPES (NAME_TYP) VALUES ('RAM');
INSERT INTO T_COMPONENTS (SERIAL_COMP, FKTYPES_COMP) VALUES ('i54433S', 1);
INSERT INTO T_COMPONENTS (SERIAL_COMP, FKTYPES_COMP) VALUES ('rx5000', 2);
INSERT INTO T_COMPONENTS (SERIAL_COMP, FKTYPES_COMP) VALUES ('DDR-333', 3);
INSERT INTO T_COMPONENTS (SERIAL_COMP, FKTYPES_COMP) VALUES ('i74770S', 1);
INSERT INTO T_USERS (EMAIL_USE, USERNAME_USE, PASSWD_USE) VALUES ('admin@admin.com', 'admin', 'admin');
INSERT INTO T_USERS (EMAIL_USE, USERNAME_USE, PASSWD_USE) VALUES ('user@user.com', 'user', 'user');
INSERT INTO T_ROLES (FKUSERS_ROL, FKROLESCODES_ROL) VALUES (1, 1);
INSERT INTO T_ROLES (FKUSERS_ROL, FKROLESCODES_ROL) VALUES (1, 2);
INSERT INTO T_ROLES (FKUSERS_ROL, FKROLESCODES_ROL) VALUES (2, 2);
-- CHECK INFORMATION
SELECT * FROM T_USERS;
SELECT * FROM T_ROLES;
SELECT T_USERS.ID_USE AS "id", T_USERS.USERNAME_USE AS USERNAME, T_ROLESCODES.NAME_ROL AS "role" FROM T_ROLES 
INNER JOIN T_USERS ON T_ROLES.fkusers_rol = T_USERS.id_use
INNER JOIN T_ROLESCODES ON T_ROLES.fkrolescodes_rol = T_ROLESCODES.ID_ROL;